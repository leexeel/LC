"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable max-len */
const dgram_1 = (0, tslib_1.__importDefault)(require("dgram"));
const DNSPacket_1 = require("../coder/DNSPacket");
const Question_1 = require("../coder/Question");
const ARecord_1 = require("../coder/records/ARecord");
const NSECRecord_1 = require("../coder/records/NSECRecord");
const PTRRecord_1 = require("../coder/records/PTRRecord");
const SRVRecord_1 = require("../coder/records/SRVRecord");
const TXTRecord_1 = require("../coder/records/TXTRecord");
const decodeContext = {
    address: "0.0.0.0",
    family: "ipv4",
    port: 5353,
};
const socket = dgram_1.default.createSocket({
    type: "udp4",
    reuseAddr: true,
});
function txtBuffersFromRecord(txt) {
    const result = [];
    Object.entries(txt).forEach(([key, value]) => {
        const entry = key + "=" + value;
        result.push(Buffer.from(entry));
    });
    return result;
}
/*
const packet = DNSPacket.createDNSQueryPackets({
  questions: [new Question("eve-light-strip-971a.", QType.ANY, true)],
})[0];
 */
const packet = DNSPacket_1.DNSPacket.createDNSResponsePacketsFromRRSet({
    answers: [
        new PTRRecord_1.PTRRecord("_hap._tcp.local.", "Test Room2._hap._tcp.local."),
        //new NSECRecord("Test-Room2.local.", "Test-Room2.local.", [RType.A, RType.AAAA], 120),
        new NSECRecord_1.NSECRecord("Test Room2._hap._tcp.local.", "Test Room2._hap._tcp.local.", [16 /* TXT */, 33 /* SRV */], 4500, true),
        new ARecord_1.ARecord("Test-Room4.local.", "192.168.178.99", true),
        new SRVRecord_1.SRVRecord("Test Room2._hap._tcp.local.", "Test-Room4.local.", 1300, true),
        new TXTRecord_1.TXTRecord("Test Room2._hap._tcp.local.", txtBuffersFromRecord({
            "c#": 4,
            ff: 0,
            id: "64:88:E6:0D:D6:F9",
            md: "EXAMPLE",
            pv: "1.1",
            "s#": 1,
            sf: 1,
            ci: 17,
            sh: "X4Tq6g==",
        }), true),
    ],
});
const query = DNSPacket_1.DNSPacket.createDNSQueryPackets({
    questions: [
        //new Question("_hap._tcp.local.", QType.ANY, false),
        new Question_1.Question("_hap._tcp.local.", 12 /* PTR */, true),
        //new Question("LogiCircle.local.", QType.ANY, false),
    ],
});
socket.bind(5353, () => {
    console.log("Listening on " + JSON.stringify(socket.address()));
    socket.addMembership("224.0.0.251", "192.168.178.62");
    socket.setMulticastInterface("192.168.178.62");
    socket.setMulticastTTL(255);
    socket.setTTL(255);
    socket.setMulticastLoopback(true);
    console.log("Sending: " + new Date().getTime());
    socket.send(query[0].encode(), 5353, "224.0.0.251", () => {
        console.log("Sent");
    });
});
socket.on("message", (buffer, rinfo) => {
    console.log("Message from " + JSON.stringify(rinfo));
    const packet = DNSPacket_1.DNSPacket.decode(decodeContext, buffer);
    let print = true;
    packet.questions.forEach(record => {
        if (record.asString().includes("Living")) {
            print = true;
        }
    });
    packet.answers.forEach(record => {
        if (record.asString().includes("Living")) {
            print = true;
        }
    });
    packet.additionals.forEach(record => {
        if (record.asString().includes("Living")) {
            print = true;
        }
    });
    packet.authorities.forEach(record => {
        if (record.asString().includes("Living")) {
            print = true;
        }
    });
    if (print) {
        //console.log(new Date().getTime() + "");
        console.log(rinfo.address);
        console.log(packet);
    }
});
socket.on("error", error => console.log(error));
//# sourceMappingURL=test-client.js.map