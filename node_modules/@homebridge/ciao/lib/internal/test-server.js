"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable max-len */
const dgram_1 = (0, tslib_1.__importDefault)(require("dgram"));
const dns_string_utils_1 = require("../coder/dns-string-utils");
const DNSPacket_1 = require("../coder/DNSPacket");
const decodeContext = {
    address: "0.0.0.0",
    family: "ipv4",
    port: 5353,
};
const socket = dgram_1.default.createSocket({
    type: "udp4",
    reuseAddr: true,
});
socket.bind(5353, () => {
    console.log("Listening on " + JSON.stringify(socket.address()));
    socket.addMembership("224.0.0.251", "192.168.178.64");
    socket.setMulticastLoopback(false);
    const buffer = Buffer.alloc(9216, "A");
    socket.send(buffer, 5353, "224.0.0.251", (error, bytes) => {
        console.log(error);
        console.log(bytes);
    });
});
const names = {};
socket.on("message", (buffer, rinfo) => {
    const packet = DNSPacket_1.DNSPacket.decode(decodeContext, buffer);
    if (packet.type === 0 /* QUERY */) {
        packet.questions.forEach(record => {
            if (record.name.endsWith("_hap._tcp.local.")) {
                const saved = (0, dns_string_utils_1.dnsTypeToString)(record.type) + ":" + record.name.replace("_hap._tcp.local.", "");
                let array = names[rinfo.address];
                if (!array) {
                    array = [];
                    names[rinfo.address] = array;
                }
                if (!array.includes(saved)) {
                    array.push(saved);
                }
            }
        });
    }
    if (packet.type === 1 /* RESPONSE */) {
        if (packet.answers.size === 1) {
            for (const record of packet.answers.values()) {
                if (record.type === 16 /* TXT */ && record.name === "asdf._tasf._tcp.local") {
                    console.log("Received! " + new Date().getTime());
                }
            }
        }
    }
});
const exitHandler = (signal) => {
    console.log(JSON.stringify(names, null, 2));
    process.exit(signal + 128);
};
process.on("SIGINT", exitHandler.bind(undefined, 2));
process.on("SIGTERM", exitHandler.bind(undefined, 15));
//# sourceMappingURL=test-server.js.map