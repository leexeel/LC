"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const dgram_1 = (0, tslib_1.__importDefault)(require("dgram"));
const DNSPacket_1 = require("../coder/DNSPacket");
const socket = dgram_1.default.createSocket({
    type: "udp4",
    reuseAddr: true,
});
socket.bind(5353, () => {
    console.log("Listening on " + JSON.stringify(socket.address()));
    //socket.addMembership("224.0.0.251", "192.168.178.64");
    //socket.setMulticastInterface("192.168.178.64");
    //socket.setMulticastTTL(255);
    socket.setTTL(255);
    //socket.setMulticastLoopback(false);
    setInterval(() => {
        console.log("Sending....");
        const packet = new DNSPacket_1.DNSPacket({
            type: 0 /* QUERY */,
        });
        socket.send(packet.encode(), 5353, "224.0.0.251", error => {
            console.log(error);
            try {
                socket.addMembership("224.0.0.251", "192.168.178.64");
            }
            catch (error) {
                if (error.code !== "EADDRINUSE") {
                    console.log(error);
                }
            }
            socket.setMulticastInterface("192.168.178.64");
            socket.setMulticastTTL(255);
            socket.setMulticastLoopback(false);
            /*try {
              socket.addMembership("224.0.0.251", "192.168.178.64");
              console.log("readded membership");
            } catch (error) {
              // asdf
            }
            if (error) {
              console.log("sent failed: " + error.stack);
            } else {
              console.log("sent");
            }*/
        });
    }, 1000);
});
socket.on("error", error => {
    console.error("eRRRRRR: " + error.stack);
});
//# sourceMappingURL=test-iface.js.map